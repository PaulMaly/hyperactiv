!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.hyperactiv=t()}(this,function(){"use strict";const e=[],t=new WeakMap,n={timeout:null,queue:new Set,process:()=>{for(let e of n.queue)e();n.queue.clear(),n.timeout=null},enqueue:e=>{null===n.timeout&&(n.timeout=setTimeout(n.process,0)),n.queue.add(e)}},o=function(u,s={}){const{props:i=null,ignore:r=null,batch:c=!1,deep:f=!1}=s;if(t.set(u,new Map),f)if(u instanceof Array)for(const e in u)"object"==typeof u[e]&&(u[e]=o(u[e],s));else for(let e in u){if(!u.hasOwnProperty(e))continue;const t=u[e];"object"==typeof t&&(u[e]=o(t,s))}return new Proxy(u,{get(n,o){const s=t.get(u);if(i&&!i.includes(o)||r&&r.includes(o))return u[o];s.has(o)||s.set(o,new Set);const c=s.get(o);return e.length>0&&c.add(e[0]),s.set(o,c),u[o]},set(l,p,d){const a=t.get(u);if(u[p]===d)return!0;if(u[p]=!f||p in u||"object"!=typeof d?d:o(d,s),i&&!i.includes(p)||r&&r.includes(p))return!0;if(a.has(p)){const t=a.get(p);for(let o of t)o.__disposed?t.delete(o):(e.length<1||o!==e[0])&&(c?n.enqueue(o):o())}return!0}})};return{observe:o,computed:function(t,{autoRun:n=!0,callback:o=null}={}){const u=new Proxy(t,{apply:function(t,n,s){const i=(i=null)=>{e.unshift(o||u);const r=i?i():t.apply(n,s);return e.shift(),r};return s.push({computeAsync:e=>i(e)}),i()}});return n&&u(),u},dispose:e=>e.__disposed=!0}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHlwZXJhY3Rpdi5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbXB1dGVkU3RhY2sgPSBbXVxuY29uc3Qgb2JzZXJ2ZXJzTWFwID0gbmV3IFdlYWtNYXAoKVxuXG5jb25zdCBjb21wdXRlZCA9IGZ1bmN0aW9uKGZ1biwge8KgYXV0b1J1biA9IHRydWUsIGNhbGxiYWNrID0gbnVsbCB9ID0ge30pIHtcbiAgICBjb25zdCBwcm94eSA9IG5ldyBQcm94eShmdW4sIHtcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHRhcmdldCwgdGhpc0FyZywgYXJnc0xpc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1Db21wdXRhdGlvbiA9IChmdW4gPSBudWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZWRTdGFjay51bnNoaWZ0KGNhbGxiYWNrIHx8IHByb3h5KVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGZ1biA/IGZ1bigpIDogdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3NMaXN0KVxuICAgICAgICAgICAgICAgIGNvbXB1dGVkU3RhY2suc2hpZnQoKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXJnc0xpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tcHV0ZUFzeW5jOiB0YXJnZXQgPT4gcGVyZm9ybUNvbXB1dGF0aW9uKHRhcmdldClcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHJldHVybiBwZXJmb3JtQ29tcHV0YXRpb24oKVxuICAgICAgICB9XG4gICAgfSlcbiAgICBpZihhdXRvUnVuKSB7IHByb3h5KCkgfVxuICAgIHJldHVybiBwcm94eVxufVxuXG5jb25zdCBkaXNwb3NlID0gXyA9PiBfLl9fZGlzcG9zZWQgPSB0cnVlXG5cbmNvbnN0IGJhdGNoZXIgPcKge1xuICAgIHRpbWVvdXQ6IG51bGwsXG4gICAgcXVldWU6IG5ldyBTZXQoKSxcbiAgICBwcm9jZXNzOiAoKSA9PiB7XG4gICAgICAgIGZvcihsZXQgdGFzayBvZiBiYXRjaGVyLnF1ZXVlKVxuICAgICAgICAgICAgdGFzaygpXG4gICAgICAgIGJhdGNoZXIucXVldWUuY2xlYXIoKVxuICAgICAgICBiYXRjaGVyLnRpbWVvdXQgPSBudWxsXG4gICAgfSxcbiAgICBlbnF1ZXVlOiB0YXNrID0+IHtcbiAgICAgICAgaWYoYmF0Y2hlci50aW1lb3V0ID09PSBudWxsKVxuICAgICAgICAgICAgYmF0Y2hlci50aW1lb3V0ID0gc2V0VGltZW91dChiYXRjaGVyLnByb2Nlc3MsIDApXG4gICAgICAgIGJhdGNoZXIucXVldWUuYWRkKHRhc2spXG4gICAgfVxufVxuXG5jb25zdCBvYnNlcnZlID0gZnVuY3Rpb24ob2JqLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHByb3BzID0gbnVsbCwgaWdub3JlID0gbnVsbCwgYmF0Y2ggPSBmYWxzZSwgZGVlcCA9IGZhbHNlIH0gPSBvcHRpb25zXG4gICAgb2JzZXJ2ZXJzTWFwLnNldChvYmosIG5ldyBNYXApXG5cbiAgICBpZihkZWVwKSB7XG4gICAgICAgIGlmKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBmb3IoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBvYmpba2V5XSA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgICAgICAgICAgIG9ialtrZXldID0gb2JzZXJ2ZShvYmpba2V5XSwgb3B0aW9ucylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcihsZXQga2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmKCFvYmouaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IG9ic2VydmUodmFsdWUsIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm94eShvYmosIHtcbiAgICAgICAgZ2V0KF8sIHByb3ApIHtcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmVyTWFwID0gb2JzZXJ2ZXJzTWFwLmdldChvYmopXG5cbiAgICAgICAgICAgIGlmKChwcm9wcyAmJiAhcHJvcHMuaW5jbHVkZXMocHJvcCkpIHx8IChpZ25vcmUgJiYgaWdub3JlLmluY2x1ZGVzKHByb3ApKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqW3Byb3BdXG5cbiAgICAgICAgICAgIGlmKCFvYnNlcnZlck1hcC5oYXMocHJvcCkpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlck1hcC5zZXQocHJvcCwgbmV3IFNldCgpKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzZXQgPSBvYnNlcnZlck1hcC5nZXQocHJvcClcbiAgICAgICAgICAgIGlmKGNvbXB1dGVkU3RhY2subGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICBzZXQuYWRkKGNvbXB1dGVkU3RhY2tbMF0pXG4gICAgICAgICAgICBvYnNlcnZlck1hcC5zZXQocHJvcCwgc2V0KVxuXG4gICAgICAgICAgICByZXR1cm4gb2JqW3Byb3BdXG4gICAgICAgIH0sXG4gICAgICAgIHNldChfLCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXJNYXAgPSBvYnNlcnZlcnNNYXAuZ2V0KG9iailcblxuICAgICAgICAgICAgaWYob2JqW3Byb3BdID09PSB2YWx1ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuXG4gICAgICAgICAgICBpZihkZWVwICYmICEocHJvcCBpbiBvYmopICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgICAgICAgb2JqW3Byb3BdID0gb2JzZXJ2ZSh2YWx1ZSwgb3B0aW9ucylcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSB2YWx1ZVxuXG4gICAgICAgICAgICBpZigocHJvcHMgJiYgIXByb3BzLmluY2x1ZGVzKHByb3ApKSB8fCAoaWdub3JlICYmIGlnbm9yZS5pbmNsdWRlcyhwcm9wKSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcblxuICAgICAgICAgICAgaWYob2JzZXJ2ZXJNYXAuaGFzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVwZW5kZW50cyA9IG9ic2VydmVyTWFwLmdldChwcm9wKVxuICAgICAgICAgICAgICAgIGZvcihsZXQgZGVwZW5kZW50IG9mIGRlcGVuZGVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoZGVwZW5kZW50Ll9fZGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVudHMuZGVsZXRlKGRlcGVuZGVudClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGNvbXB1dGVkU3RhY2subGVuZ3RoIDwgMSB8fCBkZXBlbmRlbnQgIT09IGNvbXB1dGVkU3RhY2tbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGJhdGNoKSBiYXRjaGVyLmVucXVldWUoZGVwZW5kZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBkZXBlbmRlbnQoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBvYnNlcnZlLFxuICAgIGNvbXB1dGVkLFxuICAgIGRpc3Bvc2Vcbn0iXSwibmFtZXMiOlsiY29tcHV0ZWRTdGFjayIsIm9ic2VydmVyc01hcCIsIldlYWtNYXAiLCJiYXRjaGVyIiwidGltZW91dCIsInF1ZXVlIiwiU2V0IiwicHJvY2VzcyIsInRhc2siLCJjbGVhciIsImVucXVldWUiLCJzZXRUaW1lb3V0IiwiYWRkIiwib2JzZXJ2ZSIsIm9iaiIsIm9wdGlvbnMiLCJwcm9wcyIsImlnbm9yZSIsImJhdGNoIiwiZGVlcCIsInNldCIsIk1hcCIsIkFycmF5Iiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJ2YWx1ZSIsIlByb3h5IiwiW29iamVjdCBPYmplY3RdIiwiXyIsInByb3AiLCJvYnNlcnZlck1hcCIsImdldCIsImluY2x1ZGVzIiwiaGFzIiwibGVuZ3RoIiwiZGVwZW5kZW50cyIsImRlcGVuZGVudCIsIl9fZGlzcG9zZWQiLCJkZWxldGUiLCJjb21wdXRlZCIsImZ1biIsImF1dG9SdW4iLCJjYWxsYmFjayIsInByb3h5IiwiYXBwbHkiLCJ0YXJnZXQiLCJ0aGlzQXJnIiwiYXJnc0xpc3QiLCJwZXJmb3JtQ29tcHV0YXRpb24iLCJ1bnNoaWZ0IiwicmVzdWx0Iiwic2hpZnQiLCJwdXNoIiwiY29tcHV0ZUFzeW5jIiwiZGlzcG9zZSJdLCJtYXBwaW5ncyI6InNMQUFBLE1BQU1BLEtBQ0FDLEVBQWUsSUFBSUMsUUF5Qm5CQyxHQUNGQyxRQUFTLEtBQ1RDLE1BQU8sSUFBSUMsSUFDWEMsUUFBUyxLQUNMLElBQUksSUFBSUMsS0FBUUwsRUFBUUUsTUFDcEJHLElBQ0pMLEVBQVFFLE1BQU1JLFFBQ2ROLEVBQVFDLFFBQVUsTUFFdEJNLFFBQVNGLElBQ2tCLE9BQXBCTCxFQUFRQyxVQUNQRCxFQUFRQyxRQUFVTyxXQUFXUixFQUFRSSxRQUFTLElBQ2xESixFQUFRRSxNQUFNTyxJQUFJSixLQUlwQkssRUFBVSxTQUFTQyxFQUFLQyxNQUMxQixNQUFNQyxNQUFFQSxFQUFRLEtBQUlDLE9BQUVBLEVBQVMsS0FBSUMsTUFBRUEsR0FBUSxFQUFLQyxLQUFFQSxHQUFPLEdBQVVKLEVBR3JFLEdBRkFkLEVBQWFtQixJQUFJTixFQUFLLElBQUlPLEtBRXZCRixFQUNDLEdBQUdMLGFBQWVRLE1BQ2QsSUFBSSxNQUFNQyxLQUFPVCxFQUNVLGlCQUFiQSxFQUFJUyxLQUNWVCxFQUFJUyxHQUFPVixFQUFRQyxFQUFJUyxHQUFNUixTQUdyQyxJQUFJLElBQUlRLEtBQU9ULEVBQUssQ0FDaEIsSUFBSUEsRUFBSVUsZUFBZUQsR0FDbkIsU0FDSixNQUFNRSxFQUFRWCxFQUFJUyxHQUNFLGlCQUFWRSxJQUNOWCxFQUFJUyxHQUFPVixFQUFRWSxFQUFPVixJQU0xQyxPQUFPLElBQUlXLE1BQU1aLEdBQ2JhLElBQUlDLEVBQUdDLEdBQ0gsTUFBTUMsRUFBYzdCLEVBQWE4QixJQUFJakIsR0FFckMsR0FBSUUsSUFBVUEsRUFBTWdCLFNBQVNILElBQVdaLEdBQVVBLEVBQU9lLFNBQVNILEdBQzlELE9BQU9mLEVBQUllLEdBRVhDLEVBQVlHLElBQUlKLElBQ2hCQyxFQUFZVixJQUFJUyxFQUFNLElBQUl2QixLQUc5QixNQUFNYyxFQUFNVSxFQUFZQyxJQUFJRixHQUs1QixPQUpHN0IsRUFBY2tDLE9BQVMsR0FDdEJkLEVBQUlSLElBQUlaLEVBQWMsSUFDMUI4QixFQUFZVixJQUFJUyxFQUFNVCxHQUVmTixFQUFJZSxJQUVmRixJQUFJQyxFQUFHQyxFQUFNSixHQUNULE1BQU1LLEVBQWM3QixFQUFhOEIsSUFBSWpCLEdBRXJDLEdBQUdBLEVBQUllLEtBQVVKLEVBQ2IsT0FBTyxFQU9YLEdBRklYLEVBQUllLElBSExWLEdBQVVVLEtBQVFmLEdBQXlCLGlCQUFWVyxFQUdwQkEsRUFGQVosRUFBUVksRUFBT1YsR0FJM0JDLElBQVVBLEVBQU1nQixTQUFTSCxJQUFXWixHQUFVQSxFQUFPZSxTQUFTSCxHQUM5RCxPQUFPLEVBRVgsR0FBR0MsRUFBWUcsSUFBSUosR0FBTyxDQUN0QixNQUFNTSxFQUFhTCxFQUFZQyxJQUFJRixHQUNuQyxJQUFJLElBQUlPLEtBQWFELEVBQ2RDLEVBQVVDLFdBQ1RGLEVBQVdHLE9BQU9GLElBQ1pwQyxFQUFja0MsT0FBUyxHQUFLRSxJQUFjcEMsRUFBYyxNQUMzRGtCLEVBQU9mLEVBQVFPLFFBQVEwQixHQUNyQkEsS0FJakIsT0FBTyxhQU1mdkIsUUFBQUEsRUFDQTBCLFNBL0dhLFNBQVNDLEdBQUtDLFFBQUVBLEdBQVUsRUFBSUMsU0FBRUEsRUFBVyxVQUN4RCxNQUFNQyxFQUFRLElBQUlqQixNQUFNYyxHQUNwQkksTUFBTyxTQUFTQyxFQUFRQyxFQUFTQyxHQUM3QixNQUFNQyxFQUFxQixDQUFDUixFQUFNLFFBQzlCeEMsRUFBY2lELFFBQVFQLEdBQVlDLEdBQ2xDLE1BQU1PLEVBQVNWLEVBQU1BLElBQVFLLEVBQU9ELE1BQU1FLEVBQVNDLEdBRW5ELE9BREEvQyxFQUFjbUQsUUFDUEQsR0FPWCxPQUpBSCxFQUFTSyxNQUNMQyxhQUFjUixHQUFVRyxFQUFtQkgsS0FHeENHLE9BSWYsT0FER1AsR0FBV0UsSUFDUEEsR0E4RlBXLFFBM0ZZMUIsR0FBS0EsRUFBRVMsWUFBYSJ9
