!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.hyperactiv=t()}(this,function(){"use strict";const e=[],t=new WeakMap,n=e=>e&&"object"==typeof e,r=Array.isArray,u={timeout:null,queue:new Set,process(){for(const e of u.queue)e();u.queue.clear(),u.timeout=null},enqueue(e){null===u.timeout&&(u.timeout=setTimeout(u.process,0)),u.queue.add(e)}};const o=function(i,l={}){const{props:s=null,ignore:c=null,batch:f=!1,deep:a=!1,bind:d=!0,handler:p=null}=l;if(p&&a&&n(i)&&function e(t,r){Object.entries(t).forEach(([u,o])=>{["__observed","__key","__parent"].indexOf(u)<0&&o&&n(o)&&(Object.defineProperty(o,"__key",{value:u,enumerable:!1,configurable:!0}),Object.defineProperty(o,"__parent",{value:t,enumerable:!1,configurable:!0}),r&&e(o,r))})}(i,a),i.__observed)return i;t.set(i,new Map),a&&Object.entries(i).forEach(([e,t])=>{n(t)&&(i[e]=o(t,l))});const _=new Proxy(i,{get(n,r){if("__observed"===r)return!0;if((!s||s.includes(r))&&(!c||!c.includes(r))&&e.length){const n=t.get(i);n.has(r)||n.set(r,new Set),n.get(r).add(e[0])}return i[r]},set(d,_,b){if("__key"===_||"__parent"===_)d[_]=b;else{const d=t.get(i);if((!r(i)||"length"!==_)&&i[_]===b)return!0;if(i[_]=a&&n(b)?o(b,l):b,p){a&&n(i[_])&&(Object.defineProperty(i[_],"__key",{value:_,enumerable:!1,configurable:!0}),Object.defineProperty(i[_],"__parent",{value:i,enumerable:!1,configurable:!0}));const e=[_];let t=i;for(;t.__key&&t.__parent;)e.shift(t.__key),t=t.__parent;p(e,b)}if((!s||s.includes(_))&&(!c||!c.includes(_))&&d.has(_)){const t=d.get(_);for(const n of t)n.__disposed?t.delete(n):n!==e[0]&&(f?u.enqueue(n):n())}}return!0},deleteProperty:(e,t)=>(e[t]&&p&&(delete e[t].__key,delete e[t].__parent),delete e[t],!0)});return d&&n(i)&&Object.getOwnPropertyNames(i).forEach(e=>{"function"==typeof i[e]&&(i[e]=i[e].bind(_))}),_};return{observe:o,computed:function(t,{autoRun:n=!0,callback:r=null}={}){const u=new Proxy(t,{apply(t,n,o){const i=(i=null)=>{e.unshift(r||u);const l=i?i():t.apply(n,o);return e.shift(),l};return o.push({computeAsync:e=>i(e)}),i()}});return n&&u(),u},dispose:e=>e.__disposed=!0,write:function(e){return function(t,n){if(n=JSON.parse(JSON.stringify(n)),!t||t.length<1)return;let r=e||(Number.isInteger(t[0])?[]:{}),u=null;for(let e=0;e<t.length-1;e++)null==r[u=t[e]]&&(r[u]=Number.isInteger(t[e+1])?[]:{}),r=r[u];r[t[t.length-1]]=n}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
