!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.hyperactiv=t()}(this,function(){"use strict";const e=[],t=new WeakMap,n=function(e){return e&&"object"==typeof e},r=Array.isArray,o=function(e,t,n){Object.defineProperty(e,"__key",{value:t,enumerable:!1,configurable:!0}),Object.defineProperty(e,"__parent",{value:n,enumerable:!1,configurable:!0})},u={timeout:null,queue:new Set,process(){for(const e of u.queue)e();u.queue.clear(),u.timeout=null},enqueue(e){null===u.timeout&&(u.timeout=setTimeout(u.process,0)),u.queue.add(e)}},i=function(s,c={}){const{props:f=null,ignore:l=null,batch:a=!1,deep:d=!1,handler:p=null,bind:b=!1}=c;if(s.__observed)return s;t.set(s,new Map),d&&Object.entries(s).forEach(function([e,t]){n(t)&&(s[e]=i(t,c),p&&o(s[e],e,s))});const y=new Proxy(s,{get(n,r){if("__observed"===r)return!0;if((!f||f.includes(r))&&(!l||!l.includes(r))&&e.length){const n=t.get(s);n.has(r)||n.set(r,new Set),n.get(r).add(e[0])}return s[r]},set(b,_,g){const h=t.get(s);if((!r(s)||"length"!==_)&&s[_]===g)return!0;if(s[_]=d&&n(g)?i(g,c):g,p&&d&&n(g)&&o(s[_],_,s),p){const e=[_];let t=s;for(;t.__key&&t.__parent;)e.unshift(t.__key),t=t.__parent;p(e,g,y)}if((!f||f.includes(_))&&(!l||!l.includes(_))&&h.has(_)){const t=h.get(_);for(const n of t)n.__disposed?t.delete(n):n!==e[0]&&(a?u.enqueue(n):n())}return!0},deleteProperty:(e,t)=>(e[t]&&p&&(delete e[t].__key,delete e[t].__parent),delete e[t],!0)});return b&&n(s)&&Object.getOwnPropertyNames(s).forEach(e=>{"function"==typeof s[e]&&(s[e]=s[e].bind(y))})&&Object.getOwnPropertyNames(Object.getPrototypeOf(s)).forEach(e=>{"function"==typeof s[e]&&(s[e]=s[e].bind(y))}),y};return{observe:i,computed:function(t,{autoRun:n=!0,callback:r=null,bind:o=null}={}){const u=new Proxy(t,{apply(t,n,i){const s=function(s=null){e.unshift(r||u);const c=s?s():t.apply(o||n,i);return e.shift(),c};return i.push({computeAsync:function(e){return s(e)}}),s()}});return n&&u(),u},dispose:function(e){return e.__disposed=!0},handlers:{write:function(e){if(!e)throw new Error("writeHandler needs a proper target !");return function(t,r){r=n(r)?JSON.parse(JSON.stringify(r)):r;for(let n=0;n<t.length-1;n++){const r=t[n],u=t[n+1];void 0===e[r]&&(e[r]=(o=u,Number.isInteger(Number.parseInt(o))?[]:{})),e=e[r]}var o;e[t[t.length-1]]=r}},debug:function(e){return e=e||console,function(t,n){const r=t.map(e=>Number.isInteger(Number.parseInt(e))?`[${e}]`:`.${e}`).join("").substr(1);e.debug(`${r} = ${JSON.stringify(n,null,"\t")}`)}},all:function(e){return Array.isArray(e)?(t,n,r)=>e.forEach(e=>e(t,n,r)):e}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
