!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.hyperactiv=t()}(this,function(){"use strict";const e=[],t=new WeakMap,n=e=>e&&"object"==typeof e,r=Array.isArray,o={timeout:null,queue:new Set,process(){for(const e of o.queue)e();o.queue.clear(),o.timeout=null},enqueue(e){null===o.timeout&&(o.timeout=setTimeout(o.process,0)),o.queue.add(e)}};function u(e,t){Object.entries(e).forEach(([r,o])=>{n(o)&&(o.__key=r,o.__parent=e,t&&u(o,t))})}const s=function(i,c={}){const{props:l=null,ignore:f=null,batch:d=!1,deep:p=!1,bind:a=!0,handler:_=null}=c;if(_&&n(i)&&u(i,p),i.__observed)return i;t.set(i,new Map),p&&Object.entries(i).forEach(([e,t])=>{n(t)&&(i[e]=s(t,c))});const y=new Proxy(i,{get(n,r){if("__observed"===r)return!0;if((!l||l.includes(r))&&(!f||!f.includes(r))&&e.length){const n=t.get(i);n.has(r)||n.set(r,new Set),n.get(r).add(e[0])}return i[r]},set(a,y,h){const b=t.get(i);if((!r(i)||"length"!==y)&&i[y]===h)return!0;if(i[y]=p&&n(h)?s(h,c):h,_){const e=[y];n(i[y])&&(i[y].__key=y,i[y].__parent=i,u(i[y],p));let t=i;for(;t.__key&&t.__parent;)e.shift(t.__key),t=t.__parent;_(e,h)}if((!l||l.includes(y))&&(!f||!f.includes(y))&&b.has(y)){const t=b.get(y);for(const n of t)n.__disposed?t.delete(n):n!==e[0]&&(d?o.enqueue(n):n())}return!0},deleteProperty:(e,t)=>(e[t]&&_&&(delete e[t].__key,delete e[t].__parent),delete e[t],!0)});return a&&n(i)&&Object.getOwnPropertyNames(i).forEach(e=>{"function"==typeof i[e]&&(i[e]=i[e].bind(y))}),y};return{observe:s,computed:function(t,{autoRun:n=!0,callback:r=null}={}){const o=new Proxy(t,{apply(t,n,u){const s=(s=null)=>{e.unshift(r||o);const i=s?s():t.apply(n,u);return e.shift(),i};return u.push({computeAsync:e=>s(e)}),s()}});return n&&o(),o},dispose:e=>e.__disposed=!0,write:function(e){return function(t,n){if(!t||t.length<1)return;let r=e||(Number.isInteger(t[0])?[]:{}),o=null;for(let e=0;e<t.length-1;e++)null==r[o=t[e]]&&(r[o]=Number.isInteger(t[e+1])?[]:{}),r=r[o];r[t[t.length-1]]=n}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
