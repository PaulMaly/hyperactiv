!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.hyperactiv=t()}(this,function(){"use strict";const e=[],t=new WeakMap,n=e=>e&&"object"==typeof e,u=Array.isArray,r={timeout:null,queue:new Set,process(){for(const e of r.queue)e();r.queue.clear(),r.timeout=null},enqueue(e){null===r.timeout&&(r.timeout=setTimeout(r.process,0)),r.queue.add(e)}};function o(e){Object.entries(e).forEach(([t,u])=>{n(u)&&(u.__key=t,u.__parent=e,o(u))})}const s=function(l,i={}){const{props:c=null,ignore:f=null,batch:d=!1,deep:p=!1,handler:_=null}=i;return p&&_&&o(l),l.__observed?l:(t.set(l,new Map),p&&Object.entries(l).forEach(([e,t])=>{n(t)&&(l[e]=s(t,i))}),new Proxy(l,{get(n,u){if("__observed"===u)return!0;if((!c||c.includes(u))&&(!f||!f.includes(u))&&e.length){const n=t.get(l);n.has(u)||n.set(u,new Set),n.get(u).add(e[0])}return l[u]},set(a,y,h){const m=t.get(l);if((!u(l)||"length"!==y)&&l[y]===h)return!0;if(l[y]=p&&n(h)?s(h,i):h,p&&_){const e=[y];let t=l;for(l[y].__key=y,l[y].__parent=l,o(l[y]);t.__key&&t.__parent;)e.shift(t.__key),t=t.__parent;_(e,h)}if((!c||c.includes(y))&&(!f||!f.includes(y))&&m.has(y)){const t=m.get(y);for(const n of t)n.__disposed?t.delete(n):n!==e[0]&&(d?r.enqueue(n):n())}return!0},deleteProperty:(e,t)=>(e[t]&&p&&_&&(delete e[t].__key,delete e[t].__parent),delete e[t],!0)}))};return{observe:s,computed:function(t,{autoRun:n=!0,callback:u=null}={}){const r=new Proxy(t,{apply(t,n,o){const s=(s=null)=>{e.unshift(u||r);const l=s?s():t.apply(n,o);return e.shift(),l};return o.push({computeAsync:e=>s(e)}),s()}});return n&&r(),r},dispose:e=>e.__disposed=!0,write:function(e){return function(t,n){if(!t||t.length<1)return;let u=e||(Number.isNumbers(t[0])?[]:{}),r=null;for(let e=0;e<t.length-1;e++)null==u[r=t[e]]&&(u[r]=Number.isNumbers(t[e+1])?[]:{}),u=u[r];u[t[t.length-1]]=n}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
