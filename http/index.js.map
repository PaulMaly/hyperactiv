{"version":3,"file":"index.js","sources":["../src/http/tools.js","../src/http/normalized.js","../src/http/resource.js","../src/http/request.js"],"sourcesContent":["export const defaultRootKey = '__requests__'\nexport const defaultSerialize = (method, url) => `${method}@${url}`\nexport const identity = _ => _\n\nexport const normalizedOperations = {\n    read(mappings, store) {\n        const storeFragment = {}\n        Object.entries(mappings).forEach(([ entity, ids ]) => {\n            storeFragment[entity] = {}\n            ids.forEach(key => {\n                storeFragment[entity][key] = store[entity] && store[entity][key] || null\n            })\n        })\n        return storeFragment\n    },\n    write(normalizedData, store) {\n        Object.entries(normalizedData).forEach(([ entity, entityData ]) => {\n            if(!store[entity]) {\n                store[entity] = {}\n            }\n\n            Object.entries(entityData).forEach(([ key, value ]) => {\n                if(store[entity][key]) {\n                    if(typeof store[entity][key] === 'object' && typeof value === 'object') {\n                        Object.entries(value).forEach(([k, v]) => {\n                            store[entity][key][k] = v\n                        })\n                    } else {\n                        store[entity][key] = value\n                    }\n                } else {\n                    store[entity][key] = value\n                }\n            })\n        })\n    }\n}\n","import wretch from 'wretch'\nimport { normaliz } from 'normaliz'\n\nimport { identity, defaultSerialize, defaultRootKey, normalizedOperations } from './tools'\n\nexport function normalized(url, {\n    store,\n    normalize,\n    client = wretch(),\n    beforeRequest = identity,\n    afterRequest = identity,\n    rootKey = defaultRootKey,\n    serialize = defaultSerialize,\n    bodyType = 'json',\n    policy = 'cache-first'\n}) {\n    const configuredClient = beforeRequest(client.url(url))\n    const storeKey = serialize('get', configuredClient._url)\n    if(!store[rootKey]) {\n        store[rootKey] = {}\n    }\n    const storedMappings = store[rootKey][storeKey]\n    const cacheLookup = policy !== 'network-only'\n    const data =\n        cacheLookup &&\n        storedMappings &&\n        normalizedOperations.read(storedMappings, store) ||\n        null\n\n    function refetch() {\n        return configuredClient\n            .get()\n            // eslint-disable-next-line no-unexpected-multiline\n            [bodyType](body => afterRequest(body))\n            .then(result => {\n                const normalizedData = normaliz(result, normalize)\n                store[rootKey][storeKey] = Object.entries(normalizedData).reduce((mappings, [ entity, dataById ]) => {\n                    mappings[entity] = Object.keys(dataById)\n                    return mappings\n                }, {})\n                normalizedOperations.write(normalizedData, store)\n                const storeSlice = normalizedOperations.read(store[rootKey][storeKey], store)\n                return storeSlice\n            })\n    }\n\n    const future = policy !== 'cache-first' || !data ? refetch() : null\n\n    return {\n        data,\n        refetch,\n        future\n    }\n}\n","import { normalized } from './normalized'\n\nfunction formatData(data, entity, id) {\n    return (\n        data ?\n            id !== null ?\n                data[entity] && data[entity][id] :\n                data[entity] && Object.values(data[entity]) :\n            data\n    )\n}\n\nexport function resource(entity, url, {\n    id = null,\n    store,\n    normalize,\n    client,\n    beforeRequest,\n    afterRequest,\n    serialize,\n    rootKey,\n    bodyType,\n    policy = 'cache-first'\n}) {\n    const storedEntity = id && store[entity] && store[entity][id]\n\n    const {\n        data,\n        future,\n        refetch: normalizedRefetch\n    } = normalized(url, {\n        store,\n        normalize: {\n            schema: [],\n            ...normalize,\n            entity\n        },\n        client,\n        beforeRequest,\n        afterRequest,\n        serialize,\n        rootKey,\n        bodyType,\n        policy\n    })\n\n    const refetch = () => normalizedRefetch().then(data =>\n        formatData(data, entity, id)\n    )\n\n    return {\n        data: policy !== 'network-only' && storedEntity || formatData(data, entity, id),\n        future: future && future.then(data => formatData(data, entity, id)) || null,\n        refetch\n    }\n}\n","import wretch from 'wretch'\n\nimport { identity, defaultSerialize, defaultRootKey } from './tools'\n\nexport function request(url, {\n    store,\n    client = wretch(),\n    beforeRequest = identity,\n    afterRequest = identity,\n    rootKey = defaultRootKey,\n    serialize = defaultSerialize,\n    bodyType = 'json',\n    policy = 'cache-first'\n}) {\n    const configuredClient = beforeRequest(client.url(url))\n    const storeKey = serialize('get', configuredClient._url)\n    if(!store[rootKey]) {\n        store[rootKey] = {}\n    }\n    const storedData = store[rootKey][storeKey]\n    const cacheLookup = policy !== 'network-only'\n    const data = cacheLookup && storedData || null\n\n    function refetch() {\n        return configuredClient\n            .get()\n            // eslint-disable-next-line no-unexpected-multiline\n            [bodyType](body => afterRequest(body))\n            .then(result => {\n                store[rootKey][storeKey] = result\n                return result\n            })\n    }\n\n    const future = policy !== 'cache-first' || !data ? refetch() : null\n\n    return {\n        data,\n        refetch,\n        future\n    }\n}\n"],"names":["defaultRootKey","defaultSerialize","method","url","identity","_","normalizedOperations","[object Object]","mappings","store","storeFragment","Object","entries","forEach","entity","ids","key","normalizedData","entityData","value","k","v","normalized","normalize","client","wretch","beforeRequest","afterRequest","rootKey","serialize","bodyType","policy","configuredClient","storeKey","_url","storedMappings","data","read","refetch","get","body","then","result","normaliz","reduce","dataById","keys","write","future","formatData","id","values","storedData","storedEntity","normalizedRefetch","schema"],"mappings":"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"}